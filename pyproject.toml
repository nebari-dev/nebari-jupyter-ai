[build-system]
requires = ["hatchling>=1.4.0", "jupyterlab~=4.0"]
build-backend = "hatchling.build"

[project]
name = "nebari_jupyter_ai"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Framework :: Jupyter :: JupyterLab :: 4",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
version = "2.29.0"
description = "A Jupyter AI extension."
authors = [
    { name = "Quansight" },
]
dependencies = ["jupyter_ai", "langchain-openai"] # ==2.29.0", "pydantic==2.7", "jupyter_server==2.15.0"]

[project.optional-dependencies]
test = ["coverage", "pytest", "pytest-asyncio", "pytest-cov"]

[project.entry-points."jupyter_ai.model_providers"]
nebari-chat = "nebari_jupyter_ai.provider:NebariChatProvider"

[project.entry-points."jupyter_ai.embeddings_model_providers"]
# my-provider = "my_provider:MyEmbeddingsProvider"
nebari-embeddings = "nebari_jupyter_ai.provider:NebariEmbeddingsProvider"

# [project.entry-points."jupyter_ai.chat_handlers"]
# test-slash-command = "nebari_jupyter_ai.slash_command:TestSlashCommand"

[project.entry-points."jupyter_server_extensions"]
nebari_jupyter_ai = "nebari_jupyter_ai:_jupyter_server_extension_points"

[tool.hatch.build.hooks.version]
path = "nebari_jupyter_ai/_version.py"

# auto install extension
[tool.hatch.build.targets.wheel.shared-data]
"jupyter-config/server-config" = "etc/jupyter/jupyter_server_config.d"

[tool.check-wheel-contents]
ignore = ["W002"]

# conda create -n jai2 "python==3.11.11"
# conda activate jai2
# pip install -e .
# jupyter server extension list